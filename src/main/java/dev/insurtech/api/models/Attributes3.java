/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package dev.insurtech.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import dev.insurtech.api.DateTimeHelper;
import java.time.LocalDateTime;

/**
 * This is a model class for Attributes3 type.
 */
public class Attributes3 {
    private LocalDateTime createdDate;
    private LocalDateTime modifiedDate;
    private LocalDateTime actualEndDate;
    private StatusEnum status;
    private String earnedPremium;
    private String earnedTax;
    private String earnedFees;
    private String cancelReason;
    private String cancelDescription;
    private String policyNumber;
    private LocalDateTime effectiveDate;
    private String externalReference;
    private String limit;
    private String deductible;
    private PolicyStateEnum policyState;
    private Object metadata;
    private LocalDateTime termEndDate;
    private String installmentPlan;
    private String writtenPremium;
    private LocalDateTime issueDate;
    private LocalDateTime nonRenewalNoticeDate;
    private LocalDateTime cancellationNoticeDate;
    private LocalDateTime requestedCancellationDate;
    private String stateTax;
    private String stateFees;
    private String serviceFees;
    private String termPremium;
    private String billingFees;

    /**
     * Default constructor.
     */
    public Attributes3() {
    }

    /**
     * Initialization constructor.
     * @param  createdDate  LocalDateTime value for createdDate.
     * @param  modifiedDate  LocalDateTime value for modifiedDate.
     * @param  actualEndDate  LocalDateTime value for actualEndDate.
     * @param  status  StatusEnum value for status.
     * @param  earnedPremium  String value for earnedPremium.
     * @param  earnedTax  String value for earnedTax.
     * @param  earnedFees  String value for earnedFees.
     * @param  cancelReason  String value for cancelReason.
     * @param  cancelDescription  String value for cancelDescription.
     * @param  policyNumber  String value for policyNumber.
     * @param  effectiveDate  LocalDateTime value for effectiveDate.
     * @param  externalReference  String value for externalReference.
     * @param  limit  String value for limit.
     * @param  deductible  String value for deductible.
     * @param  policyState  PolicyStateEnum value for policyState.
     * @param  metadata  Object value for metadata.
     * @param  termEndDate  LocalDateTime value for termEndDate.
     * @param  installmentPlan  String value for installmentPlan.
     * @param  writtenPremium  String value for writtenPremium.
     * @param  issueDate  LocalDateTime value for issueDate.
     * @param  nonRenewalNoticeDate  LocalDateTime value for nonRenewalNoticeDate.
     * @param  cancellationNoticeDate  LocalDateTime value for cancellationNoticeDate.
     * @param  requestedCancellationDate  LocalDateTime value for requestedCancellationDate.
     * @param  stateTax  String value for stateTax.
     * @param  stateFees  String value for stateFees.
     * @param  serviceFees  String value for serviceFees.
     * @param  termPremium  String value for termPremium.
     * @param  billingFees  String value for billingFees.
     */
    public Attributes3(
            LocalDateTime createdDate,
            LocalDateTime modifiedDate,
            LocalDateTime actualEndDate,
            StatusEnum status,
            String earnedPremium,
            String earnedTax,
            String earnedFees,
            String cancelReason,
            String cancelDescription,
            String policyNumber,
            LocalDateTime effectiveDate,
            String externalReference,
            String limit,
            String deductible,
            PolicyStateEnum policyState,
            Object metadata,
            LocalDateTime termEndDate,
            String installmentPlan,
            String writtenPremium,
            LocalDateTime issueDate,
            LocalDateTime nonRenewalNoticeDate,
            LocalDateTime cancellationNoticeDate,
            LocalDateTime requestedCancellationDate,
            String stateTax,
            String stateFees,
            String serviceFees,
            String termPremium,
            String billingFees) {
        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.actualEndDate = actualEndDate;
        this.status = status;
        this.earnedPremium = earnedPremium;
        this.earnedTax = earnedTax;
        this.earnedFees = earnedFees;
        this.cancelReason = cancelReason;
        this.cancelDescription = cancelDescription;
        this.policyNumber = policyNumber;
        this.effectiveDate = effectiveDate;
        this.externalReference = externalReference;
        this.limit = limit;
        this.deductible = deductible;
        this.policyState = policyState;
        this.metadata = metadata;
        this.termEndDate = termEndDate;
        this.installmentPlan = installmentPlan;
        this.writtenPremium = writtenPremium;
        this.issueDate = issueDate;
        this.nonRenewalNoticeDate = nonRenewalNoticeDate;
        this.cancellationNoticeDate = cancellationNoticeDate;
        this.requestedCancellationDate = requestedCancellationDate;
        this.stateTax = stateTax;
        this.stateFees = stateFees;
        this.serviceFees = serviceFees;
        this.termPremium = termPremium;
        this.billingFees = billingFees;
    }

    /**
     * Getter for CreatedDate.
     * Date time when this resource was created in our system.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    /**
     * Setter for CreatedDate.
     * Date time when this resource was created in our system.
     * @param createdDate Value for LocalDateTime
     */
    @JsonSetter("created_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    /**
     * Getter for ModifiedDate.
     * Date time when this resource was last modified in our system.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("modified_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getModifiedDate() {
        return modifiedDate;
    }

    /**
     * Setter for ModifiedDate.
     * Date time when this resource was last modified in our system.
     * @param modifiedDate Value for LocalDateTime
     */
    @JsonSetter("modified_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setModifiedDate(LocalDateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    /**
     * Getter for ActualEndDate.
     * The end date for this policy if it has been ended.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("actual_end_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getActualEndDate() {
        return actualEndDate;
    }

    /**
     * Setter for ActualEndDate.
     * The end date for this policy if it has been ended.
     * @param actualEndDate Value for LocalDateTime
     */
    @JsonSetter("actual_end_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setActualEndDate(LocalDateTime actualEndDate) {
        this.actualEndDate = actualEndDate;
    }

    /**
     * Getter for Status.
     * The status of the policy.
     * @return Returns the StatusEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StatusEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * The status of the policy.
     * @param status Value for StatusEnum
     */
    @JsonSetter("status")
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    /**
     * Getter for EarnedPremium.
     * Our calculated earned premium thus far for this policy.
     * @return Returns the String
     */
    @JsonGetter("earned_premium")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEarnedPremium() {
        return earnedPremium;
    }

    /**
     * Setter for EarnedPremium.
     * Our calculated earned premium thus far for this policy.
     * @param earnedPremium Value for String
     */
    @JsonSetter("earned_premium")
    public void setEarnedPremium(String earnedPremium) {
        this.earnedPremium = earnedPremium;
    }

    /**
     * Getter for EarnedTax.
     * Our calculated earned tax thus far for this policy.
     * @return Returns the String
     */
    @JsonGetter("earned_tax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEarnedTax() {
        return earnedTax;
    }

    /**
     * Setter for EarnedTax.
     * Our calculated earned tax thus far for this policy.
     * @param earnedTax Value for String
     */
    @JsonSetter("earned_tax")
    public void setEarnedTax(String earnedTax) {
        this.earnedTax = earnedTax;
    }

    /**
     * Getter for EarnedFees.
     * Our calculated earned fees thus far for this policy.
     * @return Returns the String
     */
    @JsonGetter("earned_fees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEarnedFees() {
        return earnedFees;
    }

    /**
     * Setter for EarnedFees.
     * Our calculated earned fees thus far for this policy.
     * @param earnedFees Value for String
     */
    @JsonSetter("earned_fees")
    public void setEarnedFees(String earnedFees) {
        this.earnedFees = earnedFees;
    }

    /**
     * Getter for CancelReason.
     * A value from the set denoting the reason for policy cancellation.
     * @return Returns the String
     */
    @JsonGetter("cancel_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCancelReason() {
        return cancelReason;
    }

    /**
     * Setter for CancelReason.
     * A value from the set denoting the reason for policy cancellation.
     * @param cancelReason Value for String
     */
    @JsonSetter("cancel_reason")
    public void setCancelReason(String cancelReason) {
        this.cancelReason = cancelReason;
    }

    /**
     * Getter for CancelDescription.
     * User provided description for why policy was cancelled.
     * @return Returns the String
     */
    @JsonGetter("cancel_description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCancelDescription() {
        return cancelDescription;
    }

    /**
     * Setter for CancelDescription.
     * User provided description for why policy was cancelled.
     * @param cancelDescription Value for String
     */
    @JsonSetter("cancel_description")
    public void setCancelDescription(String cancelDescription) {
        this.cancelDescription = cancelDescription;
    }

    /**
     * Getter for PolicyNumber.
     * A unique alphanumeric string used as a human-readable value for the Policy.
     * @return Returns the String
     */
    @JsonGetter("policy_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPolicyNumber() {
        return policyNumber;
    }

    /**
     * Setter for PolicyNumber.
     * A unique alphanumeric string used as a human-readable value for the Policy.
     * @param policyNumber Value for String
     */
    @JsonSetter("policy_number")
    public void setPolicyNumber(String policyNumber) {
        this.policyNumber = policyNumber;
    }

    /**
     * Getter for EffectiveDate.
     * The date and time this policy went into effect.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("effective_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getEffectiveDate() {
        return effectiveDate;
    }

    /**
     * Setter for EffectiveDate.
     * The date and time this policy went into effect.
     * @param effectiveDate Value for LocalDateTime
     */
    @JsonSetter("effective_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setEffectiveDate(LocalDateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
    }

    /**
     * Getter for ExternalReference.
     * Any value you wish to associate with this policy such as an ID from your system.
     * @return Returns the String
     */
    @JsonGetter("external_reference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExternalReference() {
        return externalReference;
    }

    /**
     * Setter for ExternalReference.
     * Any value you wish to associate with this policy such as an ID from your system.
     * @param externalReference Value for String
     */
    @JsonSetter("external_reference")
    public void setExternalReference(String externalReference) {
        this.externalReference = externalReference;
    }

    /**
     * Getter for Limit.
     * A value from the set denoting the user-selected limit of coverage. This is dependent on your
     * product's configuration.
     * @return Returns the String
     */
    @JsonGetter("limit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLimit() {
        return limit;
    }

    /**
     * Setter for Limit.
     * A value from the set denoting the user-selected limit of coverage. This is dependent on your
     * product's configuration.
     * @param limit Value for String
     */
    @JsonSetter("limit")
    public void setLimit(String limit) {
        this.limit = limit;
    }

    /**
     * Getter for Deductible.
     * A value from the set denoting the user-selected deductible of coverage. This is dependent on
     * your product's configuration.
     * @return Returns the String
     */
    @JsonGetter("deductible")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDeductible() {
        return deductible;
    }

    /**
     * Setter for Deductible.
     * A value from the set denoting the user-selected deductible of coverage. This is dependent on
     * your product's configuration.
     * @param deductible Value for String
     */
    @JsonSetter("deductible")
    public void setDeductible(String deductible) {
        this.deductible = deductible;
    }

    /**
     * Getter for PolicyState.
     * The two letter state code (including Washington DC) for the state in which the issured entity
     * resides.
     * @return Returns the PolicyStateEnum
     */
    @JsonGetter("policy_state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PolicyStateEnum getPolicyState() {
        return policyState;
    }

    /**
     * Setter for PolicyState.
     * The two letter state code (including Washington DC) for the state in which the issured entity
     * resides.
     * @param policyState Value for PolicyStateEnum
     */
    @JsonSetter("policy_state")
    public void setPolicyState(PolicyStateEnum policyState) {
        this.policyState = policyState;
    }

    /**
     * Getter for Metadata.
     * Additional data about the policy. The required metadata fields are specific to your product.
     * @return Returns the Object
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Additional data about the policy. The required metadata fields are specific to your product.
     * @param metadata Value for Object
     */
    @JsonSetter("metadata")
    public void setMetadata(Object metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for TermEndDate.
     * The policy's natural term end date and time.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("term_end_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getTermEndDate() {
        return termEndDate;
    }

    /**
     * Setter for TermEndDate.
     * The policy's natural term end date and time.
     * @param termEndDate Value for LocalDateTime
     */
    @JsonSetter("term_end_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTermEndDate(LocalDateTime termEndDate) {
        this.termEndDate = termEndDate;
    }

    /**
     * Getter for InstallmentPlan.
     * The installment plan schedule that determines invoicing and/or automatic payment dates.
     * @return Returns the String
     */
    @JsonGetter("installment_plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInstallmentPlan() {
        return installmentPlan;
    }

    /**
     * Setter for InstallmentPlan.
     * The installment plan schedule that determines invoicing and/or automatic payment dates.
     * @param installmentPlan Value for String
     */
    @JsonSetter("installment_plan")
    public void setInstallmentPlan(String installmentPlan) {
        this.installmentPlan = installmentPlan;
    }

    /**
     * Getter for WrittenPremium.
     * The written premium for this policy.
     * @return Returns the String
     */
    @JsonGetter("written_premium")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getWrittenPremium() {
        return writtenPremium;
    }

    /**
     * Setter for WrittenPremium.
     * The written premium for this policy.
     * @param writtenPremium Value for String
     */
    @JsonSetter("written_premium")
    public void setWrittenPremium(String writtenPremium) {
        this.writtenPremium = writtenPremium;
    }

    /**
     * Getter for IssueDate.
     * The date and time that the policy was issued.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("issue_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getIssueDate() {
        return issueDate;
    }

    /**
     * Setter for IssueDate.
     * The date and time that the policy was issued.
     * @param issueDate Value for LocalDateTime
     */
    @JsonSetter("issue_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setIssueDate(LocalDateTime issueDate) {
        this.issueDate = issueDate;
    }

    /**
     * Getter for NonRenewalNoticeDate.
     * The most recently set date and time that a non-renewal notice was set to be sent.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("non_renewal_notice_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getNonRenewalNoticeDate() {
        return nonRenewalNoticeDate;
    }

    /**
     * Setter for NonRenewalNoticeDate.
     * The most recently set date and time that a non-renewal notice was set to be sent.
     * @param nonRenewalNoticeDate Value for LocalDateTime
     */
    @JsonSetter("non_renewal_notice_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setNonRenewalNoticeDate(LocalDateTime nonRenewalNoticeDate) {
        this.nonRenewalNoticeDate = nonRenewalNoticeDate;
    }

    /**
     * Getter for CancellationNoticeDate.
     * The most recently set date and time that a cancellation notice was set to be sent.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("cancellation_notice_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCancellationNoticeDate() {
        return cancellationNoticeDate;
    }

    /**
     * Setter for CancellationNoticeDate.
     * The most recently set date and time that a cancellation notice was set to be sent.
     * @param cancellationNoticeDate Value for LocalDateTime
     */
    @JsonSetter("cancellation_notice_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCancellationNoticeDate(LocalDateTime cancellationNoticeDate) {
        this.cancellationNoticeDate = cancellationNoticeDate;
    }

    /**
     * Getter for RequestedCancellationDate.
     * The most recently set date and time that an allowed party requested a policy to be cancelled.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("requested_cancellation_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getRequestedCancellationDate() {
        return requestedCancellationDate;
    }

    /**
     * Setter for RequestedCancellationDate.
     * The most recently set date and time that an allowed party requested a policy to be cancelled.
     * @param requestedCancellationDate Value for LocalDateTime
     */
    @JsonSetter("requested_cancellation_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setRequestedCancellationDate(LocalDateTime requestedCancellationDate) {
        this.requestedCancellationDate = requestedCancellationDate;
    }

    /**
     * Getter for StateTax.
     * The term state tax
     * @return Returns the String
     */
    @JsonGetter("state_tax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStateTax() {
        return stateTax;
    }

    /**
     * Setter for StateTax.
     * The term state tax
     * @param stateTax Value for String
     */
    @JsonSetter("state_tax")
    public void setStateTax(String stateTax) {
        this.stateTax = stateTax;
    }

    /**
     * Getter for StateFees.
     * The aggregate term state fees.
     * @return Returns the String
     */
    @JsonGetter("state_fees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStateFees() {
        return stateFees;
    }

    /**
     * Setter for StateFees.
     * The aggregate term state fees.
     * @param stateFees Value for String
     */
    @JsonSetter("state_fees")
    public void setStateFees(String stateFees) {
        this.stateFees = stateFees;
    }

    /**
     * Getter for ServiceFees.
     * The term aggregate service fees
     * @return Returns the String
     */
    @JsonGetter("service_fees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getServiceFees() {
        return serviceFees;
    }

    /**
     * Setter for ServiceFees.
     * The term aggregate service fees
     * @param serviceFees Value for String
     */
    @JsonSetter("service_fees")
    public void setServiceFees(String serviceFees) {
        this.serviceFees = serviceFees;
    }

    /**
     * Getter for TermPremium.
     * This term premium . This value includes taxes only for admitted products
     * @return Returns the String
     */
    @JsonGetter("term_premium")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTermPremium() {
        return termPremium;
    }

    /**
     * Setter for TermPremium.
     * This term premium . This value includes taxes only for admitted products
     * @param termPremium Value for String
     */
    @JsonSetter("term_premium")
    public void setTermPremium(String termPremium) {
        this.termPremium = termPremium;
    }

    /**
     * Getter for BillingFees.
     * The term aggregate billing fees
     * @return Returns the String
     */
    @JsonGetter("billing_fees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingFees() {
        return billingFees;
    }

    /**
     * Setter for BillingFees.
     * The term aggregate billing fees
     * @param billingFees Value for String
     */
    @JsonSetter("billing_fees")
    public void setBillingFees(String billingFees) {
        this.billingFees = billingFees;
    }

    /**
     * Converts this Attributes3 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Attributes3 [" + "createdDate=" + createdDate + ", modifiedDate=" + modifiedDate
                + ", actualEndDate=" + actualEndDate + ", status=" + status + ", earnedPremium="
                + earnedPremium + ", earnedTax=" + earnedTax + ", earnedFees=" + earnedFees
                + ", cancelReason=" + cancelReason + ", cancelDescription=" + cancelDescription
                + ", policyNumber=" + policyNumber + ", effectiveDate=" + effectiveDate
                + ", externalReference=" + externalReference + ", limit=" + limit + ", deductible="
                + deductible + ", policyState=" + policyState + ", metadata=" + metadata
                + ", termEndDate=" + termEndDate + ", installmentPlan=" + installmentPlan
                + ", writtenPremium=" + writtenPremium + ", issueDate=" + issueDate
                + ", nonRenewalNoticeDate=" + nonRenewalNoticeDate + ", cancellationNoticeDate="
                + cancellationNoticeDate + ", requestedCancellationDate="
                + requestedCancellationDate + ", stateTax=" + stateTax + ", stateFees=" + stateFees
                + ", serviceFees=" + serviceFees + ", termPremium=" + termPremium + ", billingFees="
                + billingFees + "]";
    }

    /**
     * Builds a new {@link Attributes3.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Attributes3.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .createdDate(getCreatedDate())
                .modifiedDate(getModifiedDate())
                .actualEndDate(getActualEndDate())
                .status(getStatus())
                .earnedPremium(getEarnedPremium())
                .earnedTax(getEarnedTax())
                .earnedFees(getEarnedFees())
                .cancelReason(getCancelReason())
                .cancelDescription(getCancelDescription())
                .policyNumber(getPolicyNumber())
                .effectiveDate(getEffectiveDate())
                .externalReference(getExternalReference())
                .limit(getLimit())
                .deductible(getDeductible())
                .policyState(getPolicyState())
                .metadata(getMetadata())
                .termEndDate(getTermEndDate())
                .installmentPlan(getInstallmentPlan())
                .writtenPremium(getWrittenPremium())
                .issueDate(getIssueDate())
                .nonRenewalNoticeDate(getNonRenewalNoticeDate())
                .cancellationNoticeDate(getCancellationNoticeDate())
                .requestedCancellationDate(getRequestedCancellationDate())
                .stateTax(getStateTax())
                .stateFees(getStateFees())
                .serviceFees(getServiceFees())
                .termPremium(getTermPremium())
                .billingFees(getBillingFees());
        return builder;
    }

    /**
     * Class to build instances of {@link Attributes3}.
     */
    public static class Builder {
        private LocalDateTime createdDate;
        private LocalDateTime modifiedDate;
        private LocalDateTime actualEndDate;
        private StatusEnum status;
        private String earnedPremium;
        private String earnedTax;
        private String earnedFees;
        private String cancelReason;
        private String cancelDescription;
        private String policyNumber;
        private LocalDateTime effectiveDate;
        private String externalReference;
        private String limit;
        private String deductible;
        private PolicyStateEnum policyState;
        private Object metadata;
        private LocalDateTime termEndDate;
        private String installmentPlan;
        private String writtenPremium;
        private LocalDateTime issueDate;
        private LocalDateTime nonRenewalNoticeDate;
        private LocalDateTime cancellationNoticeDate;
        private LocalDateTime requestedCancellationDate;
        private String stateTax;
        private String stateFees;
        private String serviceFees;
        private String termPremium;
        private String billingFees;



        /**
         * Setter for createdDate.
         * @param  createdDate  LocalDateTime value for createdDate.
         * @return Builder
         */
        public Builder createdDate(LocalDateTime createdDate) {
            this.createdDate = createdDate;
            return this;
        }

        /**
         * Setter for modifiedDate.
         * @param  modifiedDate  LocalDateTime value for modifiedDate.
         * @return Builder
         */
        public Builder modifiedDate(LocalDateTime modifiedDate) {
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Setter for actualEndDate.
         * @param  actualEndDate  LocalDateTime value for actualEndDate.
         * @return Builder
         */
        public Builder actualEndDate(LocalDateTime actualEndDate) {
            this.actualEndDate = actualEndDate;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  StatusEnum value for status.
         * @return Builder
         */
        public Builder status(StatusEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for earnedPremium.
         * @param  earnedPremium  String value for earnedPremium.
         * @return Builder
         */
        public Builder earnedPremium(String earnedPremium) {
            this.earnedPremium = earnedPremium;
            return this;
        }

        /**
         * Setter for earnedTax.
         * @param  earnedTax  String value for earnedTax.
         * @return Builder
         */
        public Builder earnedTax(String earnedTax) {
            this.earnedTax = earnedTax;
            return this;
        }

        /**
         * Setter for earnedFees.
         * @param  earnedFees  String value for earnedFees.
         * @return Builder
         */
        public Builder earnedFees(String earnedFees) {
            this.earnedFees = earnedFees;
            return this;
        }

        /**
         * Setter for cancelReason.
         * @param  cancelReason  String value for cancelReason.
         * @return Builder
         */
        public Builder cancelReason(String cancelReason) {
            this.cancelReason = cancelReason;
            return this;
        }

        /**
         * Setter for cancelDescription.
         * @param  cancelDescription  String value for cancelDescription.
         * @return Builder
         */
        public Builder cancelDescription(String cancelDescription) {
            this.cancelDescription = cancelDescription;
            return this;
        }

        /**
         * Setter for policyNumber.
         * @param  policyNumber  String value for policyNumber.
         * @return Builder
         */
        public Builder policyNumber(String policyNumber) {
            this.policyNumber = policyNumber;
            return this;
        }

        /**
         * Setter for effectiveDate.
         * @param  effectiveDate  LocalDateTime value for effectiveDate.
         * @return Builder
         */
        public Builder effectiveDate(LocalDateTime effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * Setter for externalReference.
         * @param  externalReference  String value for externalReference.
         * @return Builder
         */
        public Builder externalReference(String externalReference) {
            this.externalReference = externalReference;
            return this;
        }

        /**
         * Setter for limit.
         * @param  limit  String value for limit.
         * @return Builder
         */
        public Builder limit(String limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Setter for deductible.
         * @param  deductible  String value for deductible.
         * @return Builder
         */
        public Builder deductible(String deductible) {
            this.deductible = deductible;
            return this;
        }

        /**
         * Setter for policyState.
         * @param  policyState  PolicyStateEnum value for policyState.
         * @return Builder
         */
        public Builder policyState(PolicyStateEnum policyState) {
            this.policyState = policyState;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Object value for metadata.
         * @return Builder
         */
        public Builder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for termEndDate.
         * @param  termEndDate  LocalDateTime value for termEndDate.
         * @return Builder
         */
        public Builder termEndDate(LocalDateTime termEndDate) {
            this.termEndDate = termEndDate;
            return this;
        }

        /**
         * Setter for installmentPlan.
         * @param  installmentPlan  String value for installmentPlan.
         * @return Builder
         */
        public Builder installmentPlan(String installmentPlan) {
            this.installmentPlan = installmentPlan;
            return this;
        }

        /**
         * Setter for writtenPremium.
         * @param  writtenPremium  String value for writtenPremium.
         * @return Builder
         */
        public Builder writtenPremium(String writtenPremium) {
            this.writtenPremium = writtenPremium;
            return this;
        }

        /**
         * Setter for issueDate.
         * @param  issueDate  LocalDateTime value for issueDate.
         * @return Builder
         */
        public Builder issueDate(LocalDateTime issueDate) {
            this.issueDate = issueDate;
            return this;
        }

        /**
         * Setter for nonRenewalNoticeDate.
         * @param  nonRenewalNoticeDate  LocalDateTime value for nonRenewalNoticeDate.
         * @return Builder
         */
        public Builder nonRenewalNoticeDate(LocalDateTime nonRenewalNoticeDate) {
            this.nonRenewalNoticeDate = nonRenewalNoticeDate;
            return this;
        }

        /**
         * Setter for cancellationNoticeDate.
         * @param  cancellationNoticeDate  LocalDateTime value for cancellationNoticeDate.
         * @return Builder
         */
        public Builder cancellationNoticeDate(LocalDateTime cancellationNoticeDate) {
            this.cancellationNoticeDate = cancellationNoticeDate;
            return this;
        }

        /**
         * Setter for requestedCancellationDate.
         * @param  requestedCancellationDate  LocalDateTime value for requestedCancellationDate.
         * @return Builder
         */
        public Builder requestedCancellationDate(LocalDateTime requestedCancellationDate) {
            this.requestedCancellationDate = requestedCancellationDate;
            return this;
        }

        /**
         * Setter for stateTax.
         * @param  stateTax  String value for stateTax.
         * @return Builder
         */
        public Builder stateTax(String stateTax) {
            this.stateTax = stateTax;
            return this;
        }

        /**
         * Setter for stateFees.
         * @param  stateFees  String value for stateFees.
         * @return Builder
         */
        public Builder stateFees(String stateFees) {
            this.stateFees = stateFees;
            return this;
        }

        /**
         * Setter for serviceFees.
         * @param  serviceFees  String value for serviceFees.
         * @return Builder
         */
        public Builder serviceFees(String serviceFees) {
            this.serviceFees = serviceFees;
            return this;
        }

        /**
         * Setter for termPremium.
         * @param  termPremium  String value for termPremium.
         * @return Builder
         */
        public Builder termPremium(String termPremium) {
            this.termPremium = termPremium;
            return this;
        }

        /**
         * Setter for billingFees.
         * @param  billingFees  String value for billingFees.
         * @return Builder
         */
        public Builder billingFees(String billingFees) {
            this.billingFees = billingFees;
            return this;
        }

        /**
         * Builds a new {@link Attributes3} object using the set fields.
         * @return {@link Attributes3}
         */
        public Attributes3 build() {
            return new Attributes3(createdDate, modifiedDate, actualEndDate, status, earnedPremium,
                    earnedTax, earnedFees, cancelReason, cancelDescription, policyNumber,
                    effectiveDate, externalReference, limit, deductible, policyState, metadata,
                    termEndDate, installmentPlan, writtenPremium, issueDate, nonRenewalNoticeDate,
                    cancellationNoticeDate, requestedCancellationDate, stateTax, stateFees,
                    serviceFees, termPremium, billingFees);
        }
    }
}
